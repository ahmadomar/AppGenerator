// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CSharpGenerator.Web.App
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class AppProj : AppProjBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"<?xml version=""1.0"" encoding=""utf-8""?>
<Project ToolsVersion=""12.0"" DefaultTargets=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
  <Import Project=""$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props"" Condition=""Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')"" />
  <PropertyGroup>
    <Configuration Condition="" '$(Configuration)' == '' "">Debug</Configuration>
    <Platform Condition="" '$(Platform)' == '' "">AnyCPU</Platform>
    <ProductVersion>
    </ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{");
            
            #line 15 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ProjectGuid));
            
            #line default
            #line hidden
            this.Write("}</ProjectGuid>\r\n    <ProjectTypeGuids>{349c5851-65df-11da-9384-00065b846f21};{fa" +
                    "e04ec0-301f-11d3-bf4b-00c04f79efbc}</ProjectTypeGuids>\r\n    <OutputType>Library<" +
                    "/OutputType>\r\n    <AppDesignerFolder>Properties</AppDesignerFolder>\r\n    <RootNa" +
                    "mespace>");
            
            #line 19 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ApplicationName));
            
            #line default
            #line hidden
            this.Write("</RootNamespace>\r\n    <AssemblyName>");
            
            #line 20 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ApplicationName));
            
            #line default
            #line hidden
            this.Write("</AssemblyName>\r\n    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>\r\n    <" +
                    "UseIISExpress>true</UseIISExpress>\r\n    <IISExpressSSLPort />\r\n    <IISExpressAn" +
                    "onymousAuthentication />\r\n    <IISExpressWindowsAuthentication />\r\n    <IISExpre" +
                    "ssUseClassicPipelineMode />\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" \'$" +
                    "(Configuration)|$(Platform)\' == \'Debug|AnyCPU\' \">\r\n    <DebugSymbols>true</Debug" +
                    "Symbols>\r\n    <DebugType>full</DebugType>\r\n    <Optimize>false</Optimize>\r\n    <" +
                    "OutputPath>bin\\</OutputPath>\r\n    <DefineConstants>DEBUG;TRACE</DefineConstants>" +
                    "\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n  <" +
                    "/PropertyGroup>\r\n  <PropertyGroup Condition=\" \'$(Configuration)|$(Platform)\' == " +
                    "\'Release|AnyCPU\' \">\r\n    <DebugType>pdbonly</DebugType>\r\n    <Optimize>true</Opt" +
                    "imize>\r\n    <OutputPath>bin\\</OutputPath>\r\n    <DefineConstants>TRACE</DefineCon" +
                    "stants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLeve" +
                    "l>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"EntityFramework\">" +
                    "\r\n      <HintPath>bin\\EntityFramework.dll</HintPath>\r\n    </Reference>\r\n    <Ref" +
                    "erence Include=\"EntityFramework.SqlServer\">\r\n      <HintPath>bin\\EntityFramework" +
                    ".SqlServer.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"Microsoft.C" +
                    "Sharp\" />\r\n    <Reference Include=\"System.Data.Entity\" />\r\n    <Reference Includ" +
                    "e=\"System.Data.Entity.Design\" />\r\n    <Reference Include=\"System.Web.DynamicData" +
                    "\" />\r\n    <Reference Include=\"System.Web.Entity\" />\r\n    <Reference Include=\"Sys" +
                    "tem.Web.ApplicationServices\" />\r\n    <Reference Include=\"System.ComponentModel.D" +
                    "ataAnnotations\" />\r\n    <Reference Include=\"System\" />\r\n    <Reference Include=\"" +
                    "System.Data\" />\r\n    <Reference Include=\"System.Core\" />\r\n    <Reference Include" +
                    "=\"System.Data.DataSetExtensions\" />\r\n    <Reference Include=\"System.Web.Extensio" +
                    "ns\" />\r\n    <Reference Include=\"System.Web.Optimization\">\r\n        <HintPath>bin" +
                    "\\System.Web.Optimization.dll</HintPath>      \r\n    </Reference>\r\n    <Reference " +
                    "Include=\"System.Xml.Linq\" />\r\n    <Reference Include=\"System.Drawing\" />\r\n    <R" +
                    "eference Include=\"System.Web\" />\r\n    <Reference Include=\"System.Xml\" />\r\n    <R" +
                    "eference Include=\"System.Configuration\" />\r\n    <Reference Include=\"System.Web.S" +
                    "ervices\" />\r\n    <Reference Include=\"System.EnterpriseServices\" />\r\n    <Referen" +
                    "ce Include=\"WebGrease, Version=1.5.2.14234, Culture=neutral, PublicKeyToken=31bf" +
                    "3856ad364e35, processorArchitecture=MSIL\">\r\n      <SpecificVersion>False</Specif" +
                    "icVersion>\r\n      <HintPath>bin\\WebGrease.dll</HintPath>\r\n    </Reference>\r\n  </" +
                    "ItemGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"System.Web.Razor\">\r\n      <Hi" +
                    "ntPath>bin\\System.Web.Razor.dll</HintPath>\r\n    </Reference>\r\n    <Reference Inc" +
                    "lude=\"System.Web.Webpages.Deployment\">\r\n      <HintPath>bin\\System.Web.Webpages." +
                    "Deployment.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"System.Web." +
                    "Webpages.Razor\">\r\n      <HintPath>bin\\System.Web.Webpages.Razor.dll</HintPath>\r\n" +
                    "    </Reference>\r\n    <Reference Include=\"System.Web.Helpers\">\r\n      <HintPath>" +
                    "bin\\System.Web.Helpers.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=" +
                    "\"System.Web.Mvc\">\r\n      <HintPath>bin\\System.Web.Mvc.dll</HintPath>\r\n    </Refe" +
                    "rence>\r\n    <Reference Include=\"PagedList\">\r\n      <HintPath>bin\\PagedList.dll</" +
                    "HintPath>\r\n    </Reference>\r\n    <Reference Include=\"PagedList.Mvc\">\r\n      <Hin" +
                    "tPath>bin\\PagedList.Mvc.dll</HintPath>\r\n    </Reference>\r\n  </ItemGroup>\r\n  <Ite" +
                    "mGroup>\r\n    <Content Include=\"Content\\");
            
            #line 103 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AppTheme));
            
            #line default
            #line hidden
            this.Write(@""" />
    <Content Include=""Content\Site.css"" />
    <Content Include=""Content\bootstrap-datetimepicker.css"" />
    <Content Include=""Content\PagedList.css"" />
    <Content Include=""fonts\glyphicons-halflings-regular.svg"" />
    <Content Include=""Global.asax"" />
    <Content Include=""Scripts\bootstrap.js"" />
    <Content Include=""Scripts\bootstrap.min.js"" />
    <Content Include=""Scripts\moment.min.js"" />
    <Content Include=""Scripts\bootstrap-datetimepicker.js"" />
    <Content Include=""fonts\glyphicons-halflings-regular.eot"" />
    <Content Include=""fonts\glyphicons-halflings-regular.ttf"" />
    <Content Include=""fonts\glyphicons-halflings-regular.woff"" />
    <None Include=""Scripts\jquery-1.10.2.intellisense.js"" />
    <Content Include=""Scripts\jquery-1.10.2.js"" />
    <Content Include=""Scripts\jquery-1.10.2.min.js"" />
    <None Include=""Scripts\jquery.validate-vsdoc.js"" />
    <Content Include=""Scripts\jquery.validate.js"" />
    <Content Include=""Scripts\jquery.validate.min.js"" />
    <Content Include=""Scripts\jquery.validate.unobtrusive.js"" />
    <Content Include=""Scripts\jquery.validate.unobtrusive.min.js"" />
    <Content Include=""Scripts\modernizr-2.6.2.js"" />
    <Content Include=""Web.config"" />
    <Content Include=""Views\Shared\_nav.cshtml"" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include=""App_Start\BundleConfig.cs"" />
    <Compile Include=""App_Start\RouteConfig.cs"" />
    <Compile Include=""ContentHelper.cs"" />
");
            
            #line 132 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"

    foreach(var Controller in Controllers){
    
            
            #line default
            #line hidden
            this.Write("        <Compile Include=\"Controllers\\");
            
            #line 135 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Controller));
            
            #line default
            #line hidden
            this.Write("Controller.cs\" />\r\n");
            
            #line 136 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
    } 
            
            #line default
            #line hidden
            this.Write("    <Compile Include=\"Controllers\\\\HomeController.cs\" />\r\n    <Compile Include=\"G" +
                    "lobal.asax.cs\">\r\n      <DependentUpon>Global.asax</DependentUpon>\r\n    </Compile" +
                    ">\r\n    <Compile Include=\"Models\\");
            
            #line 141 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ApplicationName));
            
            #line default
            #line hidden
            this.Write("Context.cs\" />\r\n    ");
            
            #line 142 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
    foreach(var item in Models){ 
            
            #line default
            #line hidden
            this.Write("    <Compile Include=\"Models\\");
            
            #line 143 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write(".cs\" />\r\n");
            
            #line 144 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
    } 
            
            #line default
            #line hidden
            this.Write("\r\n    ");
            
            #line 146 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
    foreach(var item in Models){ 
            
            #line default
            #line hidden
            this.Write("    <Compile Include=\"Models\\Mapping\\");
            
            #line 147 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("Map.cs\" />\r\n");
            
            #line 148 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
    } 
            
            #line default
            #line hidden
            this.Write("    <Compile Include=\"Models\\ModelsMetadata.cs\" />\r\n\r\n  </ItemGroup>\r\n  <ItemGrou" +
                    "p>\r\n    <Content Include=\"Scripts\\jquery-1.10.2.min.map\" />\r\n    \r\n");
            
            #line 155 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"

    foreach(var Controller in Controllers){
    
            
            #line default
            #line hidden
            this.Write("    <Content Include=\"Views\\");
            
            #line 158 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Controller));
            
            #line default
            #line hidden
            this.Write("\\Create.cshtml\" />\r\n    <Content Include=\"Views\\");
            
            #line 159 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Controller));
            
            #line default
            #line hidden
            this.Write("\\Delete.cshtml\" />\r\n    <Content Include=\"Views\\");
            
            #line 160 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Controller));
            
            #line default
            #line hidden
            this.Write("\\Details.cshtml\" />\r\n    <Content Include=\"Views\\");
            
            #line 161 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Controller));
            
            #line default
            #line hidden
            this.Write("\\Edit.cshtml\" />\r\n    <Content Include=\"Views\\");
            
            #line 162 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Controller));
            
            #line default
            #line hidden
            this.Write("\\Index.cshtml\" />\r\n");
            
            #line 163 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
    } 
            
            #line default
            #line hidden
            this.Write(@"    <Content Include=""Views\Home\Index.cshtml"" />
    <Content Include=""Views\Shared\_Layout.cshtml"" />
    <Content Include=""Views\web.config"" />
    <Content Include=""Views\_ViewStart.cshtml"" />
    <None Include=""Web.Debug.config"">
      <DependentUpon>Web.config</DependentUpon>
    </None>
    <None Include=""Web.Release.config"">
      <DependentUpon>Web.config</DependentUpon>
    </None>
  </ItemGroup>
  <ItemGroup>
    <Folder Include=""App_Data\"" />
  </ItemGroup>
  <PropertyGroup>
    <VisualStudioVersion Condition=""'$(VisualStudioVersion)' == ''"">10.0</VisualStudioVersion>
    <VSToolsPath Condition=""'$(VSToolsPath)' == ''"">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
  </PropertyGroup>
  <Import Project=""$(MSBuildBinPath)\Microsoft.CSharp.targets"" />
  <Import Project=""$(VSToolsPath)\WebApplications\Microsoft.WebApplication.targets"" Condition=""'$(VSToolsPath)' != ''"" />
  <Import Project=""$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v10.0\WebApplications\Microsoft.WebApplication.targets"" Condition=""false"" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID=""{");
            
            #line 187 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FlavorPropertiesGuid));
            
            #line default
            #line hidden
            this.Write(@"}"">
        <WebProjectProperties>
          <UseIIS>True</UseIIS>
          <AutoAssignPort>True</AutoAssignPort>
          <DevelopmentServerPort>1627</DevelopmentServerPort>
          <DevelopmentServerVPath>/</DevelopmentServerVPath>
          <IISUrl>http://localhost:");
            
            #line 193 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(IISPort));
            
            #line default
            #line hidden
            this.Write(@"/</IISUrl>
          <NTLMAuthentication>False</NTLMAuthentication>
          <UseCustomServer>False</UseCustomServer>
          <CustomServerUrl>
          </CustomServerUrl>
          <SaveServerSettingsInUserFile>False</SaveServerSettingsInUserFile>
        </WebProjectProperties>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name=""BeforeBuild"">
  </Target>
  <Target Name=""AfterBuild"">
  </Target>
  -->
</Project>

");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 212 "C:\Users\Ahmed\Source\Repos\AppGenerator\WebApp\CSharpGenerator\Web\App\AppProj.tt"

    public string ApplicationName {set;get;}
    
    private string ProjectGuid{
        get{
            return Guid.NewGuid().ToString().ToLower();
        }
    }

    private string FlavorPropertiesGuid{
        get{
            return Guid.NewGuid().ToString().ToLower();
        }
    }

    private int IISPort{
        get{
            return new Random().Next(1000, 9999);
        }
    }

    public string[] Controllers{set;get;}

    public string[] Models{set;get;}

    public string AppTheme{get;set;}
 
        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class AppProjBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
